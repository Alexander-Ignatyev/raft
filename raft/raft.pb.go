// Code generated by protoc-gen-go.
// source: raft.proto
// DO NOT EDIT!

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	RequestVoteRequest
	RequestVoteResponse
	AppendEntriesRequest
	AppendEntriesResponse
	LogEntry
	PersistentState
	ExecuteCommandRequest
	ExecuteCommandResponse
*/
package raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestVoteRequest struct {
	CandidateId  int64 `protobuf:"varint,1,opt,name=candidateId" json:"candidateId,omitempty"`
	Term         int64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	LastLogIndex int64 `protobuf:"varint,3,opt,name=lastLogIndex" json:"lastLogIndex,omitempty"`
	LastLogTerm  int64 `protobuf:"varint,4,opt,name=lastLogTerm" json:"lastLogTerm,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestVoteRequest) GetCandidateId() int64 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVoteRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogIndex() int64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogTerm() int64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteResponse struct {
	Term        int64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted bool  `protobuf:"varint,2,opt,name=voteGranted" json:"voteGranted,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestVoteResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResponse) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

type AppendEntriesRequest struct {
	Term         int64       `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId     int64       `protobuf:"varint,2,opt,name=leaderId" json:"leaderId,omitempty"`
	PrevLogIndex int64       `protobuf:"varint,3,opt,name=prevLogIndex" json:"prevLogIndex,omitempty"`
	PrevLogTerm  int64       `protobuf:"varint,4,opt,name=prevLogTerm" json:"prevLogTerm,omitempty"`
	CommitIndex  int64       `protobuf:"varint,5,opt,name=commitIndex" json:"commitIndex,omitempty"`
	Entries      []*LogEntry `protobuf:"bytes,6,rep,name=entries" json:"entries,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppendEntriesRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderId() int64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogIndex() int64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() int64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetCommitIndex() int64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendEntriesResponse struct {
	Term    int64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AppendEntriesResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type LogEntry struct {
	Term    int64  `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Index   int64  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Command []byte `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LogEntry) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

type PersistentState struct {
	CurrentTerm int64       `protobuf:"varint,1,opt,name=currentTerm" json:"currentTerm,omitempty"`
	VotedFor    int64       `protobuf:"varint,2,opt,name=votedFor" json:"votedFor,omitempty"`
	Log         []*LogEntry `protobuf:"bytes,3,rep,name=log" json:"log,omitempty"`
}

func (m *PersistentState) Reset()                    { *m = PersistentState{} }
func (m *PersistentState) String() string            { return proto.CompactTextString(m) }
func (*PersistentState) ProtoMessage()               {}
func (*PersistentState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PersistentState) GetCurrentTerm() int64 {
	if m != nil {
		return m.CurrentTerm
	}
	return 0
}

func (m *PersistentState) GetVotedFor() int64 {
	if m != nil {
		return m.VotedFor
	}
	return 0
}

func (m *PersistentState) GetLog() []*LogEntry {
	if m != nil {
		return m.Log
	}
	return nil
}

type ExecuteCommandRequest struct {
	Command []byte `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *ExecuteCommandRequest) Reset()                    { *m = ExecuteCommandRequest{} }
func (m *ExecuteCommandRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteCommandRequest) ProtoMessage()               {}
func (*ExecuteCommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExecuteCommandRequest) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

type ExecuteCommandResponse struct {
	Success       bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ServerAddress string `protobuf:"bytes,2,opt,name=serverAddress" json:"serverAddress,omitempty"`
	Answer        []byte `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (m *ExecuteCommandResponse) Reset()                    { *m = ExecuteCommandResponse{} }
func (m *ExecuteCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteCommandResponse) ProtoMessage()               {}
func (*ExecuteCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ExecuteCommandResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ExecuteCommandResponse) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *ExecuteCommandResponse) GetAnswer() []byte {
	if m != nil {
		return m.Answer
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestVoteRequest)(nil), "raft.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "raft.RequestVoteResponse")
	proto.RegisterType((*AppendEntriesRequest)(nil), "raft.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "raft.AppendEntriesResponse")
	proto.RegisterType((*LogEntry)(nil), "raft.LogEntry")
	proto.RegisterType((*PersistentState)(nil), "raft.PersistentState")
	proto.RegisterType((*ExecuteCommandRequest)(nil), "raft.ExecuteCommandRequest")
	proto.RegisterType((*ExecuteCommandResponse)(nil), "raft.ExecuteCommandResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	ExecuteCommand(ctx context.Context, in *ExecuteCommandRequest, opts ...grpc.CallOption) (*ExecuteCommandResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) ExecuteCommand(ctx context.Context, in *ExecuteCommandRequest, opts ...grpc.CallOption) (*ExecuteCommandResponse, error) {
	out := new(ExecuteCommandResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/ExecuteCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	ExecuteCommand(context.Context, *ExecuteCommandRequest) (*ExecuteCommandResponse, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/ExecuteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).ExecuteCommand(ctx, req.(*ExecuteCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
		{
			MethodName: "ExecuteCommand",
			Handler:    _Raft_ExecuteCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x25, 0xa4, 0xeb, 0xca, 0xed, 0x36, 0x24, 0xb3, 0x4d, 0x21, 0xf0, 0x10, 0x45, 0x3c, 0xf4,
	0x69, 0x12, 0xe3, 0x0b, 0x26, 0x28, 0xa8, 0x30, 0x10, 0x0a, 0x13, 0xef, 0xa6, 0xbe, 0xab, 0x22,
	0xb5, 0x76, 0x66, 0xdf, 0x96, 0xf1, 0x17, 0x7c, 0x1e, 0x7f, 0xc0, 0x6f, 0x20, 0x3b, 0x76, 0xeb,
	0x94, 0x68, 0x6f, 0x3e, 0xe7, 0xd6, 0x27, 0xe7, 0x9c, 0x9b, 0x06, 0x40, 0xf3, 0x5b, 0xba, 0x68,
	0xb4, 0x22, 0xc5, 0x06, 0xf6, 0x5c, 0xfe, 0x4e, 0x80, 0x55, 0x78, 0xb7, 0x46, 0x43, 0xdf, 0x15,
	0xa1, 0x3f, 0xb2, 0x02, 0xc6, 0x73, 0x2e, 0x45, 0x2d, 0x38, 0xe1, 0x4c, 0x64, 0x49, 0x91, 0x4c,
	0xd2, 0x2a, 0xa6, 0x18, 0x83, 0x01, 0xa1, 0x5e, 0x65, 0x8f, 0xdd, 0xc8, 0x9d, 0x59, 0x09, 0x47,
	0x4b, 0x6e, 0xe8, 0x5a, 0x2d, 0x66, 0x52, 0xe0, 0x7d, 0x96, 0xba, 0x59, 0x87, 0xb3, 0xca, 0x1e,
	0xdf, 0xd8, 0xeb, 0x83, 0x56, 0x39, 0xa2, 0xca, 0x4f, 0xf0, 0xac, 0xe3, 0xc8, 0x34, 0x4a, 0x1a,
	0xdc, 0x3e, 0x30, 0x89, 0x1e, 0x58, 0xc0, 0x78, 0xa3, 0x08, 0x3f, 0x68, 0x2e, 0x09, 0x85, 0xf3,
	0x32, 0xaa, 0x62, 0xaa, 0xfc, 0x93, 0xc0, 0xe9, 0x55, 0xd3, 0xa0, 0x14, 0x53, 0x49, 0xba, 0x46,
	0x13, 0x12, 0xf6, 0xc9, 0xe5, 0x30, 0x5a, 0x22, 0x17, 0xa8, 0x67, 0xc2, 0xe7, 0xda, 0x62, 0x9b,
	0xad, 0xd1, 0xb8, 0xd9, 0xcf, 0x16, 0x73, 0xd6, 0x8e, 0xc7, 0x71, 0xb6, 0x88, 0x72, 0xbd, 0xaa,
	0xd5, 0xaa, 0xa6, 0x56, 0xe4, 0xc0, 0xf7, 0xba, 0xa3, 0xd8, 0x04, 0x0e, 0xb1, 0x75, 0x9a, 0x0d,
	0x8b, 0x74, 0x32, 0xbe, 0x3c, 0xb9, 0x70, 0x4b, 0xbb, 0x56, 0x0b, 0x9b, 0xe0, 0x57, 0x15, 0xc6,
	0xe5, 0x14, 0xce, 0xf6, 0x92, 0x3d, 0xd0, 0x54, 0x06, 0x87, 0x66, 0x3d, 0x9f, 0xa3, 0x31, 0xbe,
	0xa5, 0x00, 0xcb, 0x2f, 0x30, 0x0a, 0xda, 0xbd, 0x37, 0x4f, 0xe1, 0xa0, 0x76, 0x66, 0xdb, 0x46,
	0x5a, 0x60, 0xf5, 0xac, 0x6b, 0x2e, 0x85, 0x6b, 0xe2, 0xa8, 0x0a, 0xb0, 0xbc, 0x83, 0xa7, 0x5f,
	0x51, 0x9b, 0xda, 0x10, 0x4a, 0xfa, 0x46, 0x9c, 0xd0, 0xa5, 0x5e, 0x6b, 0x8d, 0x92, 0x6e, 0x76,
	0xea, 0x31, 0x65, 0x9b, 0xb7, 0x5b, 0x13, 0xef, 0x95, 0x0e, 0xcd, 0x07, 0xcc, 0x0a, 0x48, 0x97,
	0x6a, 0x91, 0xa5, 0xbd, 0x6d, 0xd8, 0x51, 0xf9, 0x1a, 0xce, 0xa6, 0xf7, 0x38, 0x5f, 0x13, 0xbe,
	0x6d, 0x4d, 0x84, 0x25, 0x47, 0x2e, 0x93, 0xae, 0xcb, 0x06, 0xce, 0xf7, 0xaf, 0xf8, 0xf6, 0xa2,
	0xa6, 0x92, 0x4e, 0x53, 0xec, 0x15, 0x1c, 0x1b, 0xd4, 0x1b, 0xd4, 0x57, 0x42, 0xe8, 0xd0, 0xe4,
	0x93, 0xaa, 0x4b, 0xb2, 0x73, 0x18, 0x72, 0x69, 0x7e, 0xa2, 0xf6, 0xc5, 0x78, 0x74, 0xf9, 0x37,
	0x81, 0x41, 0xc5, 0x6f, 0x89, 0xbd, 0x83, 0x71, 0xf4, 0x7e, 0xb3, 0xac, 0x4d, 0xf4, 0xff, 0x9f,
	0x30, 0x7f, 0xde, 0x33, 0x69, 0x4d, 0x96, 0x8f, 0xd8, 0x47, 0x38, 0xee, 0x6c, 0x9f, 0xe5, 0xed,
	0xaf, 0xfb, 0x5e, 0xf6, 0xfc, 0x45, 0xef, 0x6c, 0xab, 0xf5, 0x19, 0x4e, 0xba, 0x65, 0x30, 0x7f,
	0xa1, 0xb7, 0xd5, 0xfc, 0x65, 0xff, 0x30, 0xc8, 0xfd, 0x18, 0xba, 0x0f, 0xcc, 0x9b, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x5c, 0xb1, 0xe7, 0x0b, 0x6e, 0x04, 0x00, 0x00,
}
